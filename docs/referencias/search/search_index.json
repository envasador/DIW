{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dise\u00f1o de Interfaces Web","text":"<p>Dise\u00f1o de Interfaces Web dentro del ciclo de Desarrollo de Aplicaciones Web se enfoca en capacitar a los estudiantes en la creaci\u00f3n de interfaces web eficaces, atractivas y accesibles, aplicando las mejores pr\u00e1cticas de dise\u00f1o y utilizando las tecnolog\u00edas actuales. Los objetivos se dividen en varios Resultados de Aprendizaje (RA), que cubren desde la planificaci\u00f3n inicial hasta la creaci\u00f3n de interfaces amigables y accesibles.</p> <p>El m\u00f3dulo se organiza en las siguientes unidades, que se actualizar\u00e1n a medida que avance el curso. Cada unidad incluye enlaces de referencia y recursos adicionales para facilitar tu aprendizaje:</p> <ul> <li>Unidad 1: Bienvenido/a a la agencia de publicidad</li> <li>Unidad 2: Planificaci\u00f3n y Prototipado de una interfaz web</li> <li>Unidad 3: Testing de Usabilidad</li> <li>Unidad 4: Desarrollando la interfaz web</li> <li>Unidad 5: Testing en producci\u00f3n</li> <li>Unidad 6: Dise\u00f1o 2D, audio y video para videojuegos</li> <li>Unidad 7: Elementos interactivos</li> </ul>"},{"location":"#referencias-web-generales","title":"Referencias web generales","text":"<p>El desarrollo de software est\u00e1 en constante evoluci\u00f3n, actualmente podemos observar como una avalancha de nuevas tendencias tecnol\u00f3gicas y metodolog\u00edas se va abriendo paso. Este es el motivo principal por el que la mayor parte de los apuntes proporcionados no son m\u00e1s que referencias web actuales a los temas que vamos a tratar.</p> <ul> <li>HTML5 by Manz</li> <li>SVG by Manz</li> <li>CSS by Manz</li> <li>FreeCodeCamp</li> <li>developer.mozilla.org</li> </ul>"},{"location":"ud1/","title":"Unidad de Trabajo 1: Introducci\u00f3n al Dise\u00f1o, Percepci\u00f3n y Comunicaci\u00f3n Visual","text":""},{"location":"ud1/#1-introduccion-al-diseno","title":"1. Introducci\u00f3n al Dise\u00f1o","text":"<p>El dise\u00f1o es una disciplina que combina creatividad, funcionalidad y est\u00e9tica para resolver problemas visuales y de comunicaci\u00f3n. En este tema se tratar\u00e1n: - Definici\u00f3n de dise\u00f1o: \u00bfQu\u00e9 es el dise\u00f1o gr\u00e1fico y el dise\u00f1o de interfaces? - El proceso de dise\u00f1o: Desde la investigaci\u00f3n hasta la ejecuci\u00f3n. - Dise\u00f1o centrado en el usuario (DCU): La importancia de dise\u00f1ar pensando en las necesidades del usuario final. - Funcionalidad vs est\u00e9tica: Encontrando el balance adecuado para cada proyecto.</p> <p>Ejemplo pr\u00e1ctico: Selecciona una p\u00e1gina web que uses frecuentemente. Eval\u00faa c\u00f3mo balancea los aspectos visuales (colores, tipograf\u00edas) con la funcionalidad (navegaci\u00f3n, facilidad de uso).</p>"},{"location":"ud1/#11-percepcion-visual","title":"1.1 Percepci\u00f3n Visual","text":"<p>La percepci\u00f3n visual es el proceso por el cual interpretamos lo que vemos. Entender c\u00f3mo las personas perciben formas, colores y espacio es esencial en el dise\u00f1o. - Teor\u00edas de la percepci\u00f3n visual: La Gestalt y sus principios (proximidad, similitud, continuidad, cierre). - La importancia del contexto: C\u00f3mo el contexto afecta la interpretaci\u00f3n de los elementos visuales. - Atenci\u00f3n selectiva: Qu\u00e9 elementos atraen m\u00e1s atenci\u00f3n en una interfaz.</p> <p>Ejemplo pr\u00e1ctico: Analiza una interfaz web y determina c\u00f3mo se aplican los principios de la Gestalt. \u00bfQu\u00e9 elementos de la p\u00e1gina llaman m\u00e1s la atenci\u00f3n y por qu\u00e9?</p>"},{"location":"ud1/#12-elementos-y-principios-del-diseno","title":"1.2 Elementos y Principios del Dise\u00f1o","text":"<p>El dise\u00f1o visual est\u00e1 compuesto por varios elementos que, al ser combinados correctamente, crean una comunicaci\u00f3n visual efectiva: - Elementos del dise\u00f1o:     - L\u00ednea: Definir bordes o guiar la mirada del usuario.     - Forma: C\u00edrculos, cuadrados, tri\u00e1ngulos, etc. que forman la estructura.     - Textura: Superficie visual que a\u00f1ade profundidad.     - Espacio: Positivo (objetos) y negativo (vac\u00edos), que crean jerarqu\u00eda visual.     - Color: Capacidad de evocar emociones, destacar elementos y crear armon\u00eda. - Principios del dise\u00f1o:     - Balance: Sim\u00e9trico, asim\u00e9trico y radial.     - Contraste: Diferencias marcadas entre los elementos para hacerlos destacar.     - \u00c9nfasis: Uso del color, tama\u00f1o o forma para destacar un punto focal.     - Proporci\u00f3n: Relaci\u00f3n de tama\u00f1o entre los diferentes elementos.     - Ritmo: Repetici\u00f3n de elementos para crear un patr\u00f3n.</p> <p>Ejemplo pr\u00e1ctico: Selecciona una p\u00e1gina web y analiza c\u00f3mo se aplican los principios de balance y contraste para guiar al usuario.</p>"},{"location":"ud1/#13-importancia-de-la-comunicacion-visual","title":"1.3 Importancia de la Comunicaci\u00f3n Visual","text":"<p>La comunicaci\u00f3n visual es una herramienta clave en el dise\u00f1o porque: - Transmite mensajes de forma instant\u00e1nea. Las im\u00e1genes, iconos y colores comunican m\u00e1s r\u00e1pido que el texto. - Es universal. Aunque las interpretaciones pueden variar culturalmente, la comunicaci\u00f3n visual trasciende las barreras del lenguaje. - Refuerza la identidad de marca. Un buen uso de la comunicaci\u00f3n visual refuerza la percepci\u00f3n de una empresa o producto.</p> <p>Ejemplo pr\u00e1ctico: Revisa la identidad visual de una marca reconocida (como Nike o Apple). Eval\u00faa c\u00f3mo sus elementos visuales contribuyen a su comunicaci\u00f3n de marca.</p>"},{"location":"ud1/#2-el-color","title":"2. El Color","text":""},{"location":"ud1/#21-teoria-del-color","title":"2.1 Teor\u00eda del color","text":"<p>El color es uno de los elementos m\u00e1s poderosos del dise\u00f1o, capaz de evocar emociones y guiar la atenci\u00f3n del usuario. - Teor\u00eda del color:     - Colores primarios: Rojo, azul, amarillo.     - Colores secundarios y terciarios: Formados a partir de la mezcla de los primarios.     - Armon\u00edas crom\u00e1ticas: Combinaciones de colores que funcionan bien juntas (complementarios, an\u00e1logos, tr\u00edadas). - Propiedades del color: Saturaci\u00f3n (pureza), brillo (luminosidad), matiz (tono del color). - T\u00e9cnicas de combinaci\u00f3n: Uso del c\u00edrculo crom\u00e1tico para crear contrastes o armon\u00edas suaves.</p> <p>Ejemplo pr\u00e1ctico: Dise\u00f1a una paleta de colores para un sitio web usando la herramienta de combinaci\u00f3n de colores de Adobe Color. Explica por qu\u00e9 seleccionaste esos colores.</p>"},{"location":"ud1/#22-juego-de-combinacion-de-colores","title":"2.2 Juego de Combinaci\u00f3n de Colores","text":"<p>Juego interactivo: Utiliza este juego de combinaci\u00f3n de colores para entrenar tu percepci\u00f3n de tonos, saturaci\u00f3n y valor. Identificar\u00e1s diferencias sutiles entre colores y practicar\u00e1s c\u00f3mo combinarlos arm\u00f3nicamente.</p>"},{"location":"ud1/#23-generadores-de-color-e-ilusiones-en-linea","title":"2.3 Generadores de Color e Ilusiones en L\u00ednea","text":"<p>Herramientas recomendadas: - Adobe Color: Crea paletas de colores personalizadas. - Coolors.co: Generador r\u00e1pido de combinaciones de colores. - Illusions.org: Ejemplos de ilusiones \u00f3pticas relacionadas con el color.</p>"},{"location":"ud1/#24-psicologia-del-color","title":"2.4 Psicolog\u00eda del Color","text":"<p>Enlace: Psicolog\u00eda del Color El color influye en las emociones y percepciones de los usuarios. En este tema se estudiar\u00e1n: - El impacto emocional de los colores:     - Rojo: Energ\u00eda, pasi\u00f3n, urgencia.     - Azul: Confianza, calma, profesionalismo.     - Verde: Naturaleza, equilibrio, crecimiento.     - Amarillo: Alegr\u00eda, advertencia, optimismo. - Cultura y color: C\u00f3mo los colores tienen diferentes significados en diferentes culturas. - Aplicaci\u00f3n en dise\u00f1o web: Uso estrat\u00e9gico del color para influir en la experiencia de usuario (UX).</p> <p>Ejemplo pr\u00e1ctico: Analiza c\u00f3mo una marca utiliza los colores en su sitio web para evocar ciertas emociones o acciones.</p>"},{"location":"ud1/#3-tipografia","title":"3. Tipograf\u00eda","text":""},{"location":"ud1/#31-que-son-las-tipografias","title":"3.1 \u00bfQu\u00e9 son las tipograf\u00edas?","text":"<p>Enlace: Tipograf\u00edas La tipograf\u00eda es el arte de seleccionar y organizar fuentes para comunicar mensajes de manera efectiva. - Clasificaci\u00f3n de fuentes:     - Serif: Fuentes con remates, ideales para textos largos.     - Sans-serif: Sin remates, modernas y minimalistas.     - Script: Imitan la escritura manual, utilizadas en dise\u00f1os informales o creativos.     - Display: Fuentes decorativas para titulares o dise\u00f1o gr\u00e1fico llamativo.      - Monoespaciada: Tienen el mismo ancho en cada letra, utilizadas principalmente en programaci\u00f3n y dise\u00f1o t\u00e9cnico. Se analizar\u00e1n sus aplicaciones en dise\u00f1o web, como en interfaces de c\u00f3digo. - Jerarqu\u00eda tipogr\u00e1fica: C\u00f3mo usar diferentes tama\u00f1os y pesos para guiar la lectura.</p> <p>Ejemplo pr\u00e1ctico: Crea una jerarqu\u00eda tipogr\u00e1fica para un sitio web ficticio, seleccionando dos tipograf\u00edas complementarias (una serif y una sans-serif).</p>"},{"location":"ud1/#32-recomendaciones-para-el-uso-de-la-tipografia","title":"3.2 Recomendaciones para el Uso de la Tipograf\u00eda","text":"<p>Consejos clave: - Limita el uso a 2-3 tipograf\u00edas por proyecto. - Considera la legibilidad en tama\u00f1os peque\u00f1os. - Mant\u00e9n una coherencia tipogr\u00e1fica en toda la interfaz.</p>"},{"location":"ud1/#4-iconos","title":"4. Iconos","text":""},{"location":"ud1/#que-son-los-iconos","title":"\u00bfQu\u00e9 son los iconos?","text":"<p>Enlace: Iconos Los iconos son representaciones visuales simplificadas que ayudan a mejorar la navegaci\u00f3n y la comprensi\u00f3n en interfaces de usuario. - Uso adecuado de iconos: C\u00f3mo evitar sobrecargar el dise\u00f1o con iconos innecesarios. - Iconograf\u00eda adaptable: Dise\u00f1ar iconos que funcionen bien en diferentes tama\u00f1os y resoluciones.</p> <p>Ejemplo pr\u00e1ctico: Selecciona una serie de iconos para una aplicaci\u00f3n m\u00f3vil y explica c\u00f3mo representan las funciones de manera intuitiva.</p>"},{"location":"ud1/#5-identidad-corporativa-y-guia-de-estilos","title":"5, Identidad Corporativa y Gu\u00eda de Estilos","text":""},{"location":"ud1/#51-a-que-le-llamamos-identidad-corporativa","title":"5.1 \u00bfA qu\u00e9 le llamamos identidad corporativa?","text":"<p>Enlace: Identidad Corporativa La identidad corporativa es la combinaci\u00f3n de todos los elementos visuales y conceptuales que representan a una marca. - Componentes: Logotipo, paleta de colores, tipograf\u00eda, tono de comunicaci\u00f3n. - Consistencia visual: C\u00f3mo mantener coherencia en todos los puntos de contacto de una marca.</p>"},{"location":"ud1/#52-guia-de-estilos-de-la-ui","title":"5.2 Gu\u00eda de Estilos de la UI","text":"<p>Enlace: Gu\u00eda de Estilos de la UI Una gu\u00eda de estilos de UI asegura la coherencia en el dise\u00f1o de una aplicaci\u00f3n o sitio web. - Componentes t\u00edpicos: Botones, formularios, tipograf\u00eda, colores, iconos. - Ejemplo: Gu\u00eda de Material Design de Google.</p>"},{"location":"ud1/#recursos","title":"Recursos","text":""},{"location":"ud1/#entendiendo-el-color-y-la-luz","title":"Entendiendo el Color y la Luz","text":"<p>Enlace: Entendiendo el Color y la Luz Video educativo de Ted-ed sobre c\u00f3mo los colores y la luz interact\u00faan en la naturaleza.</p>"},{"location":"ud1/#color-y-linguistica","title":"Color y Ling\u00fc\u00edstica","text":"<p>Enlace: Color y Ling\u00fc\u00edstica Video que explora c\u00f3mo diferentes culturas ven y nombran los colores.</p>"},{"location":"ud1/#el-color-rojo","title":"El Color Rojo","text":"<p>Enlace: El Color Rojo Un art\u00edculo que examina el simbolismo y la psicolog\u00eda del color rojo en diversas culturas.</p>"},{"location":"ud1/#actividades-de-refuerzo-y-ampliacion","title":"Actividades de Refuerzo y Ampliaci\u00f3n","text":""},{"location":"ud1/#ut1-a01-rebranding","title":"UT1 - A01: Rebranding","text":"<p>Tarea: Selecciona una marca existente y redise\u00f1a su identidad visual. Incluye logotipo, paleta de colores y tipograf\u00eda.</p>"},{"location":"ud1/#ut1-ar01-diseno-tipografico-abstracto","title":"UT1 - AR01: Dise\u00f1o Tipogr\u00e1fico Abstracto","text":"<p>Tarea: Crea un dise\u00f1o tipogr\u00e1fico abstracto usando una paleta de colores limitada y elementos tipogr\u00e1ficos de forma creativa.</p>"},{"location":"ud2/","title":"UD2 - JavaScript fundamentals","text":"<p>Como referencia de para esta unidad se ha tomado el material de \"The Modern JavaScript Tutorial\". En concreto los siguientes apartados del mismo:</p> <p>JavaScript Fundamentals</p> <ul> <li>Hello, world!</li> <li>Code structure</li> <li>The modern mode, \"use strict\"</li> <li>Variables</li> <li>Data types</li> <li>Interaction: alert, prompt, confirm</li> <li>Type Conversions</li> <li>Basic operators, maths</li> <li>Comparisons</li> <li>Conditional branching: if, '?'</li> <li>Logical operators</li> <li>Nullish coalescing operator '??'</li> <li>Loops: while and for</li> <li>The \"switch\" statement</li> </ul> <p>Code quality</p> <ul> <li>Debugging in the browser</li> <li>Coding Style</li> <li>Comments</li> <li>Ninja code</li> </ul>"},{"location":"ud2/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda la realizaci\u00f3n de los siguientes cursos de la certificaci\u00f3n algoritmos de javascript y estructuras de datos de freeCodeCamp.</p> <ul> <li> <p>Learn Introductory JavaScript by Building a Pyramid Generator</p> </li> <li> <p>Review JavaScript Fundamentals by Building a Gradebook App</p> </li> <li> <p>Learn Basic JavaScript by Building a Role Playing Game</p> </li> <li> <p>Learn Basic Debugging by Building a Random Background Color Changer</p> </li> </ul>"},{"location":"ud3/","title":"UD3 - User-Defined Structures","text":"<p>Como referencia de para esta unidad se ha tomado el material de \"The Modern JavaScript Tutorial\". En concreto los siguientes apartados del mismo:</p> <p>JavaScript Fundamentals</p> <ul> <li>Functions</li> <li>Function expressions</li> <li>Arrow functions, the basics</li> <li>JavaScript specials</li> </ul> <p>Data types</p> <ul> <li>Methods of primitives</li> <li>Numbers</li> <li>Strings</li> <li>Arrays</li> <li>Array methods</li> <li>Iterables</li> <li>Map and Set</li> <li>Object.keys, values, entries</li> <li>Destructuring assignment</li> <li>Date and time</li> <li>JSON methods, toJSON</li> </ul> <p>Objects: the basics</p> <ul> <li>Objects</li> <li>Object references and copying</li> <li>Object methods, \"this\"</li> <li>Constructor, operator \"new\"</li> </ul> <p>Object properties configuration</p> <ul> <li>Property getters and setters</li> </ul> <p>Classes</p> <ul> <li>Class basic syntax</li> <li>Class inheritance</li> <li>Static properties and methods</li> <li>Private and protected properties and methods</li> </ul>"},{"location":"ud3/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda la realizaci\u00f3n de los siguientes cursos de la certificaci\u00f3n algoritmos de javascript y estructuras de datos de freeCodeCamp.</p> <ul> <li>Learn Basic String and Array Methods by Building a Music Player</li> <li>Learn the Date Object by Building a Date Formatter</li> <li>Learn Advanced Array Methods by Building a Statistics Calculator</li> <li>Learn Basic OOP by Building a Shopping Cart</li> </ul>"},{"location":"ud4/","title":"UD4 - DOM manipulation and events","text":"<p>Como referencia de para esta unidad se ha tomado el material de \"The Modern JavaScript Tutorial\". En concreto los siguientes apartados del mismo:</p> <p>Document</p> <ul> <li>Browser environment, specs</li> <li>DOM tree</li> <li>Walking the DOM</li> <li>Searching: getElement, querySelector</li> <li>Node properties: type, tag and contents</li> <li>Attributes and properties</li> <li>Modifying the document</li> <li>Styles and classes</li> <li>Element size and scrolling</li> <li>Window sizes and scrolling</li> <li>Coordinates</li> </ul> <p>Introduction to Events</p> <ul> <li>Introduction to browser events</li> <li>Bubbling and capturing</li> <li>Event delegation</li> <li>Browser default actions</li> <li>Dispatching custom events</li> </ul> <p>UI Events</p> <ul> <li>Mouse events</li> <li>Moving the mouse: mouseover/out, mouseenter/leave</li> <li>Drag'n'Drop with mouse events</li> <li>Pointer events</li> <li>Keyboard: keydown and keyup</li> <li>Scrolling</li> </ul> <p>Forms, controls</p> <ul> <li>Form properties and methods</li> <li>Focusing: focus/blur</li> <li>Events: change, input, cut, copy, paste</li> <li>Forms: event and method submit</li> </ul> <p>Regular expressions</p> <p>Document and resource loading</p> <ul> <li>Page: DOMContentLoaded, load, beforeunload, unload, beforeunload, unload</li> <li>Scripts: async, defer</li> <li>Resource loading: onload and onerror</li> </ul> <p>Storing data in the browser</p> <ul> <li>Cookies, document.cookie</li> <li>LocalStorage, sessionStorage</li> <li>IndexedDB</li> </ul> <p>Error handling</p> <ul> <li>Error handling, \"try...catch\"</li> <li>Custom errors, extending Error</li> </ul> <p>Promises</p> <ul> <li>Introduction: callbacks</li> <li>Promise</li> <li>Promises chaining</li> <li>Error handling with promises</li> <li>Promise API</li> <li>Promisification</li> <li>Async/await</li> </ul> <p>Network requests</p> <ul> <li>Fetch</li> <li>FormData</li> <li>Fetch: Download progress</li> <li>Fetch: Abort</li> <li>Fetch: Cross-Origin Requests</li> <li>Fetch API</li> <li>URL objects</li> <li>XMLHttpRequest</li> </ul>"},{"location":"ud4/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda la realizaci\u00f3n de los siguientes cursos de la certificaci\u00f3n algoritmos de javascript y estructuras de datos de freeCodeCamp.</p> <ul> <li>Learn Form Validation by Building a Calorie Counter</li> <li>Learn Regular Expressions by Building a Spam Filter</li> <li>Review DOM Manipulation by Building a Rock, Paper, Scissors Game</li> <li>Learn localStorage by Building a Todo App</li> <li>Learn Fetch and Promises by Building an fCC Authors Page,</li> <li>Learn Asynchronous Programming by Building an fCC Forum Leaderboard</li> </ul>"},{"location":"ud5.1-Empezando-con-React/","title":"Empezando con React","text":"<p>Vamos, en primer lugar, antes de empezar con nuestros proyectos de clase, a hacer varios cursos que nos van a servir para introducirnos en estas nuevas tecnolog\u00edas. </p>"},{"location":"ud5.1-Empezando-con-React/#introduccion-a-react","title":"Introducci\u00f3n a React","text":"<p>En primer lugar empezaremos por este curso introductorio de React, en el cual aprenderemos c\u00f3mo crear diferentes tipos de componentes de React.</p>"},{"location":"ud5.1-Empezando-con-React/#introduccion-a-redux","title":"Introducci\u00f3n a Redux","text":"<p>A medida que las aplicaciones crecen en tama\u00f1o y alcance, la gesti\u00f3n de datos compartidos se vuelve mucho m\u00e1s dif\u00edcil. Redux es un \"contenedor de estados\" que ayuda a que nuestras aplicaciones funcionen de manera predecible y que sean m\u00e1s f\u00e1ciles de probar.</p> <p>Vamos ahora a aprender algo de redux mediante este curso, aprenderemos los fundamentos de Redux para administrar datos en toda su aplicaci\u00f3n.</p>"},{"location":"ud5.1-Empezando-con-React/#react-y-redux","title":"React y Redux","text":"<p>Ahora que sabemos c\u00f3mo administrar el flujo de datos compartidos con Redux, es hora de combinar ese conocimiento con React. En \u00e9ste curso de freecodecamp vamos a crear un componente de React y administraremos el estado localmente a nivel de componente y en toda la aplicaci\u00f3n con Redux.</p>"},{"location":"ud5.2-Paso-a-paso/","title":"Paso a paso con React","text":"<p>En la documentaci\u00f3n oficial de React encontraremos toda la informaci\u00f3n de la librer\u00eda, y adem\u00e1s, algunos tutoriales muy interesantes. Uno de los recursos de obligada visita es su gu\u00eda de inicio r\u00e1pido.</p>"},{"location":"ud5.2-Paso-a-paso/#otros-materiales","title":"Otros materiales","text":"<p>A parte de lo anteriormente visto, estaremos usando mas funcionalidades, dejamos por aqu\u00ed algunos enlaces que estar\u00eda bien ir revisando a estas alturas:</p> <ul> <li>React Routing Guide</li> <li>Redux</li> <li>React Redux</li> <li>Redux Dev Tools</li> </ul>"},{"location":"ud5/","title":"UD5 - React.js","text":"<p>React es sin duda una de las tecnolog\u00edas web m\u00e1s revolucionarias de la actualidad, fue lanzado por primera vez en 2013 por Facebook y es actualmente mantenido por ellos mismo y la comunidad de c\u00f3digo abierto, la cual se extiende alrededor del mundo.</p> <p>React, a diferencia de muchas tecnolog\u00edas del desarrollo web, es una librer\u00eda lo que lo hace mucho m\u00e1s f\u00e1cil de implementar en muchos desarrollos, ya que se encarga exclusivamente de la interfaz gr\u00e1fica del usuario y consume los datos a trav\u00e9s de API que por lo general son REST.</p> <p>El nombre de React proviene de su capacidad de crear interfaces de usuario reactivas, la cual es la capacidad de una aplicaci\u00f3n para actualizar toda la interfaz gr\u00e1fica en cadena, como si se tratara de una f\u00f3rmula en Excel, donde al cambiar el valor de una celda autom\u00e1ticamente actualiza todas las celdas que depende del valor actualizado y esto se repite con las celdas que a la vez depend\u00eda de estas \u00faltimas.</p>"},{"location":"ud5/#como-funciona-react","title":"C\u00f3mo funciona React","text":"<p>React nos permite crear la interfaz UI mediante una sintaxis propia llamada Javascript XML (JSX) el cual es una mezcla entre XML y HTML que permite la construcci\u00f3n de elementos HTML de una forma muy simple y r\u00e1pida.</p> <p>Las aplicaciones desarrolladas mediante JSX no pueden ser interpretadas por el navegador, por lo que es requerido que todo el c\u00f3digo sea convertido a Javascript nativo mediante un proceso llamado transpilaci\u00f3n, el cual es parecido a la compilaci\u00f3n, pero en este proceso no se lleva a cabo una compilaci\u00f3n como tal, sino que el c\u00f3digo es convertido de JSX a Javascript.</p> <p>Este proceso es llevado a cabo mediante herramientas como Webpack el cual es el m\u00e1s ampliamente utilizado.</p> <p> </p> <p>Como vemos en la imagen, Webpack es en realidad un empaquetador, el cual organiza, compacta y mediante plugins como Babel realiza la transpilaci\u00f3n, arrojando como resultado una serie de archivos compactos y listos para ser utilizados.</p>"},{"location":"ud5/#react-y-el-backend","title":"React y el Backend","text":"<p>React solo sirve para la creaci\u00f3n de interfaz gr\u00e1fica, por lo que el desarrollo del backend queda fuera de React y es precisamente eso lo que lo hace una librer\u00eda super portable, ya que la podemos integrar con cualquier API ya desarrollada.</p> <p>C\u00f3mo React no es capaz de resolver la parte del backend es necesario desarrollar el API de datos mediante otras tecnolog\u00edas como NodeJS, el cual es por lo general el servidor m\u00e1s utilizado para el desarrollo con React.</p> <p>El API es consumido mediante AJAX a medida que la aplicaci\u00f3n lo demanda.</p> <p> </p>"},{"location":"ud5/#react-y-web-components","title":"React y Web Components","text":"<p>React utiliza un concepto llamado Web Componentes, el cual es la creaci\u00f3n de tus propias etiquetas de HTML para representar tus componentes. Te imaginas crear un login en tu p\u00e1gina utilizando una etiqueta como esta &lt;login&gt;, pues esta forma de trabajar es la que propone React, donde todo lo que desarrollemos sean componentes que puedan ser reutilizables cuantas veces queramos, incluso podr\u00e1n ser empaquetadas como librer\u00edas para que las utilices en diferentes desarrollos. Esto lo puedes ver como si cada componente fuera una peque\u00f1a caja, y lo \u00fanico que tenemos que hacer es colocar las cajas donde la necesitemos.</p> <p> </p> <p>Como podemos ver en la imagen, cada parte de la aplicaci\u00f3n puede ser un componente (etiqueta) el cual solo se tiene que agregar a la p\u00e1gina para crear interfaces gr\u00e1ficas mucho m\u00e1s r\u00e1pido. Ahora veamos c\u00f3mo quedar\u00eda esta misma p\u00e1gina, pero en c\u00f3digo con React:</p> <pre><code>import React from 'react'\nimport NavBar from './NavBar'\nimport Login from './Login'\nimport Footer from './Footer'\nclass LoginApp extends React.Component{\n  render(){\n    return(\n    &lt;div&gt;\n        &lt;NavBar/&gt;\n        &lt;Login/&gt;\n        &lt;Footer/&gt;\n    &lt;/div&gt;\n    )\n  }\n}\n</code></pre> <p>Observemos que estamos utilizando las etiquetas como NavBar y Login,  las cuales no son propias de HTML.</p>"},{"location":"ud5/#react-y-el-shadow-dom","title":"React y el Shadow DOM","text":"<p>Como se ha comentado anteriormente, React se ejecuta del lado de cliente, por lo que es esta misma la encargada de actualizar el DOM a medida que el usuario interact\u00faa con la UI, sin embargo, el proceso de actualizaci\u00f3n del DOM es un trabajo muy costoso para el navegador, por lo que actualizar el DOM cada vez que el usuario realiza una acci\u00f3n, no es una opci\u00f3n, es por esto que React provee un DOM propio llamado Shadow DOM el cual es una versi\u00f3n del DOM sobre la cual React trabaja para realizar los cambios, y una vez que calcula todos los cambios que hay que realizar es solo entonces cuando actualiza el DOM del navegador. </p> <p>Este proceso es en realidad muy complejo y React se encarga por completo de su gesti\u00f3n, por lo que como programadores no hace falta preocuparnos por estos detalles en la mayor\u00eda de las veces.</p> <p> </p> <p>Cuando se realiza un cambio en el Shadow DOM, este se sincroniza con el DOM original y es necesario realizar un proceso llamado reconciliaci\u00f3n, el cual es el encargado de aplicar los cambios del Shadow DOM al DOM real.</p> <p> </p>"},{"location":"ud5/#react-y-los-estados","title":"React y los Estados","text":"<p>Una de las principales caracter\u00edsticas de React es que los componentes pueden mantener estados. Los estados le indican los datos que el componente muestra, e incluso el formato en se muestran.</p> <p>Por ejemplo, podemos tener un formulario, el cual tenga los estados de solo lectura y edici\u00f3n, en el primero, solo mostraremos los datos en texto plano, como un &lt;p&gt; o un &lt;span&gt; mientras que cuando el formulario est\u00e1 en estado de edici\u00f3n, podemos representar el formulario con &lt;imput type=\u201dtext\u201d /&gt;</p> <p>Cuando un componente por alguna raz\u00f3n modifica su estado, entra en lo que se le conoce como Dirty o Sucio, y esto le indica a React que debe de haber un proceso de reconciliaci\u00f3n para actualizar los datos en la UI. Como ya hablamos en hace un momento, React utiliza programaci\u00f3n Reactiva para actualizar los componentes, de tal forma, que cuando un componente es actualizado, todos los componentes hijos del \u00e1rbol DOM ser\u00e1n evaluados para determinar si deben de ser tambi\u00e9n actualizados.</p> <p> </p> <p>En la imagen podemos apreciar en rojo, los componentes que fueron actualizados por el usuario, por lo que React deber\u00e1 iniciar el proceso dereconciliaci\u00f3n para estos componentes, pero adicional, si este componente tiene componentes hijos, React deber\u00e1 determinar si los hijos necesitan ser tambi\u00e9n actualizados en cascada, a \u00e9ste proceso es a lo que se le conoce como programaci\u00f3n Reactiva.</p>"},{"location":"ud5/#deploy-de-react","title":"Deploy de React","text":"<p>Finalmente, React tiene una forma muy particular de ser cargado por el navegador, pues cuando el usuario entra a la p\u00e1gina, est\u00e1 solo tiene un elemento, sobre el cual react montar\u00e1 toda la aplicaci\u00f3n.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"/bundle.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Adicional del elemento root, se carga un JavaScript llamado bundle.js el cual es en realidad TODA LA APLICACI\u00d3N en un solo archivo, el cual es generado por Webpack tras ejecutar el proceso de transpilaci\u00f3n. Cuando el bundle.js se carga por completo, reemplaza el componente root por la aplicaci\u00f3n desarrollada en React.</p>"}]}